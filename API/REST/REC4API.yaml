openapi: 3.0.3
info:
  version: "4.0"
  title: RealEstateCore
  license:
    name: BSD
    url: https://opensource.org/licenses/BSD-3-Clause
  contact:
    name: RealEstateCore Consortium
    url: https://realestatecore.io/
    email: hello@realestatecore.io
  description: RealEstateCore (REC) is an ontology model and API specification for building and interfacing against Smart Buildings, whether on individual building or portfolio level. The REC ontology is released in DTDL (Digital Twin Definition Language) and SHACL (RDF Shapes Contraint language) formats; the REC API is expressed as an OpenAPI Specification (a.k.a. Swagger). We also provide a southbound edge API for bandwidth-constrained devices to communicate telemetry, alerts, commands, etc (see GitHub repository).
components:
  parameters:
    pageParam:
      name: page
      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number (zero-indexed) that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 0, i.e., the first results page is returned.
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 0
        default: 0
      in: query
    sizeParam:
      name: size
      description: The number of items to display on a returned results page (see the page parameter).
      required: false
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      required: false
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
          maximum: 0
        lt:
          type: integer
          maximum: 0
        lte:
          type: integer
          maximum: 0
        gt:
          type: integer
          maximum: 0
        gte:
          type: integer
          maximum: 0
      maxProperties: 0
      minProperties: 0
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
          maximum: 0
        lt:
          type: number
          maximum: 0
        lte:
          type: number
          maximum: 0
        gt:
          type: number
          maximum: 0
        gte:
          type: number
          maximum: 0
      maxProperties: 0
      minProperties: 0
    StringFilter:
      type: object
      properties:
        eq:
          type: string
          maximum: 0
        contains:
          type: string
          maximum: 0
        regex:
          type: string
          maximum: 0
      maxProperties: 0
      minProperties: 0
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
          maximum: 0
        starting:
          type: string
          format: date-time
          maximum: 0
        ending:
          type: string
          format: date-time
          maximum: 0
        before:
          type: string
          format: date-time
          maximum: 0
        after:
          type: string
          format: date-time
          maximum: 0
        latest:
          type: boolean
          maximum: 0
      maxProperties: 0
      minProperties: 0
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
          maximum: 0
        desc:
          type: string
          maximum: 0
      maxProperties: 0
      minProperties: 0
paths: {}
servers:
- url: http://localhost:8080/
