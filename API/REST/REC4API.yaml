openapi: 3.0.3
info:
  version: "4.0"
  title: RealEstateCore
  license:
    name: BSD
    url: https://opensource.org/licenses/BSD-3-Clause
  contact:
    name: RealEstateCore Consortium
    url: https://realestatecore.io/
    email: hello@realestatecore.io
  description: RealEstateCore (REC) is an ontology model and API specification for building and interfacing against Smart Buildings, whether on individual building or portfolio level. The REC ontology is released in DTDL (Digital Twin Definition Language) and SHACL (RDF Shapes Contraint language) formats; the REC API is expressed as an OpenAPI Specification (a.k.a. Swagger). We also provide a southbound edge API for bandwidth-constrained devices to communicate telemetry, alerts, commands, etc (see GitHub repository).
components:
  parameters:
    pageParam:
      name: page
      description: If the result set is large, pagination across the results can be employed; in that case, this parameter defines the page number (zero-indexed) that is requested by the client. The number of items included in each page is defined by the 'size' parameter. Default is 0, i.e., the first results page is returned.
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
      in: query
    sizeParam:
      name: size
      description: The number of items to display on a returned results page (see the page parameter).
      schema:
        type: integer
        format: int32
        minimum: 0
        maximum: 100
        default: 20
      in: query
    sortParam:
      name: sort
      description: The field and direction to sort results on.
      schema:
        $ref: '#/components/schemas/SortingSchema'
      style: deepObject
      in: query
  schemas:
    HydraCollectionWrapper:
      type: object
      required:
      - '@context'
      - '@type'
      - hydra:member
      properties:
        '@context':
          $ref: '#/components/schemas/Context'
        '@type':
          type: string
          default: hydra:Collection
        hydra:totalItems:
          type: integer
        hydra:view:
          type: object
          properties:
            '@id':
              type: string
              format: uri
            '@type':
              type: string
              default: hydra:PartialCollectionView
            hydra:first:
              type: string
            hydra:previous:
              type: string
            hydra:next:
              type: string
            hydra:last:
              type: string
    IntegerFilter:
      type: object
      properties:
        eq:
          type: integer
        lt:
          type: integer
        lte:
          type: integer
        gt:
          type: integer
        gte:
          type: integer
    NumberFilter:
      type: object
      properties:
        eq:
          type: number
        lt:
          type: number
        lte:
          type: number
        gt:
          type: number
        gte:
          type: number
    StringFilter:
      type: object
      properties:
        eq:
          type: string
        contains:
          type: string
        regex:
          type: string
    DateTimeFilter:
      type: object
      properties:
        eq:
          type: string
          format: date-time
        starting:
          type: string
          format: date-time
        ending:
          type: string
          format: date-time
        before:
          type: string
          format: date-time
        after:
          type: string
          format: date-time
        latest:
          type: boolean
    SortingSchema:
      type: object
      properties:
        asc:
          type: string
        desc:
          type: string
    rec_Room:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:w3id:rec:Room;1
    brick_Point:
      type: object
      properties:
        '@id':
          type: string
        '@type':
          type: string
          default: dtmi:org:brickschema:schema:Brick:Point;1
    Context:
      type: object
      required:
      - '@vocab'
      - '@base'
      - hydra
      - brick
      - rec
      properties:
        '@base':
          type: string
          format: uri
        hydra:
          type: string
          format: uri
          default: http://www.w3.org/ns/hydra/core#
        brick:
          type: string
          format: uri
          default: dtmi:org:brickschema:schema:Brick
        rec:
          type: string
          format: uri
          default: dtmi:org:w3id:rec
paths:
  /rooms:
    get:
      summary: Get 'Room' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Room' objects.
          content:
            application/ld+json: {}
      tags:
      - rooms
    post:
      summary: Create a new 'Room' object.
      parameters: []
      requestBody:
        description: New 'Room' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/rec_Room'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/rec_Room'
      tags:
      - rooms
  /rooms/{id}:
    get:
      summary: Get a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Room' object.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/rec_Room'
      tags:
      - rooms
    put:
      summary: Update an existing 'Room' entity.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Room' entity.
        required: true
        content:
          application/ld+json: {}
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json: {}
      tags:
      - rooms
    patch:
      summary: Update a single property on a specific 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/rec_Room'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/rec_Room'
      tags:
      - rooms
    delete:
      summary: Delete a 'Room' object.
      parameters:
      - name: id
        description: Id of 'Room' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Room' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Room' entity was successfully deleted."
      tags:
      - rooms
  /points:
    get:
      summary: Get 'Point' entities.
      parameters:
      - $ref: '#/components/parameters/pageParam'
      - $ref: '#/components/parameters/sizeParam'
      - $ref: '#/components/parameters/sortParam'
      responses:
        400:
          description: Bad Request
        500:
          description: Internal Server Error
        200:
          description: An array of 'Point' objects.
          content:
            application/ld+json: {}
      tags:
      - points
    post:
      summary: Create a new 'Point' object.
      parameters: []
      requestBody:
        description: New 'Point' entity that is to be added.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/brick_Point'
      responses:
        500:
          description: Internal Server Error
        400:
          description: Bad Request
        201:
          description: Entity was successfully created (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/brick_Point'
      tags:
      - points
  /points/{id}:
    get:
      summary: Get a specific 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to return.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: A 'Point' object.
          content:
            application/ld+json:
              schema:
                $ref: '#/components/schemas/brick_Point'
      tags:
      - points
    put:
      summary: Update an existing 'Point' entity.
      parameters:
      - name: id
        description: Id of 'Point' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: Updated data for 'Point' entity.
        required: true
        content:
          application/ld+json: {}
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json: {}
      tags:
      - points
    patch:
      summary: Update a single property on a specific 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to update.
        required: true
        schema:
          type: string
        in: path
      requestBody:
        description: A single JSON key-value pair (plus @context), indicating the property to update and its new value. Note that the Swagger UI does not properly show the size constraint on this parameter; but the underlying OpenAPI Specification document does.
        required: true
        content:
          application/ld+json:
            schema:
              allOf:
              - type: object
                required:
                - '@context'
                properties:
                  '@context':
                    $ref: '#/components/schemas/Context'
              - $ref: '#/components/schemas/brick_Point'
              - type: object
                maxProperties: 2
                minProperties: 2
      responses:
        400:
          description: Bad Request
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: Entity was updated successfully (new representation returned).
          content:
            application/ld+json:
              schema:
                allOf:
                - type: object
                  required:
                  - '@context'
                  properties:
                    '@context':
                      $ref: '#/components/schemas/Context'
                - $ref: '#/components/schemas/brick_Point'
      tags:
      - points
    delete:
      summary: Delete a 'Point' object.
      parameters:
      - name: id
        description: Id of 'Point' to delete.
        required: true
        schema:
          type: string
        in: path
      responses:
        404:
          description: An object of type 'Point' with the specified ID was not found.
        500:
          description: Internal Server Error
        200:
          description: "'Point' entity was successfully deleted."
      tags:
      - points
servers:
- url: http://localhost:8080/
